/* Generated by JTB 1.4.4 */
package syntaxtree;

import visitor.*;

public class MainClass implements INode {

  public NodeToken f0;

  public NodeToken f1;

  public Identifier f2;

  public NodeToken f3;

  public NodeToken f4;

  public NodeToken f5;

  public NodeToken f6;

  public NodeToken f7;

  public NodeToken f8;

  public NodeToken f9;

  public NodeToken f10;

  public NodeToken f11;

  public Identifier f12;

  public NodeToken f13;

  public NodeToken f14;

  public Statement f15;

  public NodeToken f16;

  public NodeToken f17;

  private static final long serialVersionUID = 144L;

  public MainClass(final NodeToken n0, final NodeToken n1, final Identifier n2, final NodeToken n3, final NodeToken n4, final NodeToken n5, final NodeToken n6, final NodeToken n7, final NodeToken n8, final NodeToken n9, final NodeToken n10, final NodeToken n11, final Identifier n12, final NodeToken n13, final NodeToken n14, final Statement n15, final NodeToken n16, final NodeToken n17) {
    f0 = n0;
    f1 = n1;
    f2 = n2;
    f3 = n3;
    f4 = n4;
    f5 = n5;
    f6 = n6;
    f7 = n7;
    f8 = n8;
    f9 = n9;
    f10 = n10;
    f11 = n11;
    f12 = n12;
    f13 = n13;
    f14 = n14;
    f15 = n15;
    f16 = n16;
    f17 = n17;
  }

  public MainClass(final Identifier n0, final Identifier n1, final Statement n2) {
    f0 = new NodeToken("public");
    f1 = new NodeToken("class");
    f2 = n0;
    f3 = new NodeToken("{");
    f4 = new NodeToken("public");
    f5 = new NodeToken("static");
    f6 = new NodeToken("void");
    f7 = new NodeToken("main");
    f8 = new NodeToken("(");
    f9 = new NodeToken("String");
    f10 = new NodeToken("[");
    f11 = new NodeToken("]");
    f12 = n1;
    f13 = new NodeToken(")");
    f14 = new NodeToken("{");
    f15 = n2;
    f16 = new NodeToken("}");
    f17 = new NodeToken("}");
  }

  public <R, A> R accept(final IRetArguVisitor<R, A> vis, final A argu) {
    return vis.visit(this, argu);
  }

  public <R> R accept(final IRetVisitor<R> vis) {
    return vis.visit(this);
  }

  public <A> void accept(final IVoidArguVisitor<A> vis, final A argu) {
    vis.visit(this, argu);
  }

  public void accept(final IVoidVisitor vis) {
    vis.visit(this);
  }

}
