/* Generated by JTB 1.4.4 */
package visitor;

import syntaxtree.*;
import java.util.*;

public class DepthFirstRetVisitor<R> implements IRetVisitor<R> {


  public R visit(final NodeChoice n) {
    final R nRes = n.choice.accept(this);
    return nRes;
  }

  public R visit(final NodeList n) {
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      final R sRes = e.next().accept(this);
    }
    return nRes;
  }

  public R visit(final NodeListOptional n) {
    if (n.present()) {
      R nRes = null;
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        @SuppressWarnings("unused")
        R sRes = e.next().accept(this);
        }
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeOptional n) {
    if (n.present()) {
      final R nRes = n.node.accept(this);
      return nRes;
    } else
    return null;
  }

  public R visit(final NodeSequence n) {
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      R subRet = e.next().accept(this);
    }
    return nRes;
  }

  public R visit(final NodeToken n) {
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final File n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final TopLevelDeclaration n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final MainClass n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    n.f6.accept(this);
    n.f7.accept(this);
    n.f8.accept(this);
    n.f9.accept(this);
    n.f10.accept(this);
    n.f11.accept(this);
    n.f12.accept(this);
    n.f13.accept(this);
    n.f14.accept(this);
    n.f15.accept(this);
    n.f16.accept(this);
    n.f17.accept(this);
    return nRes;
  }

  public R visit(final ClassDeclaration n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final ClassMember n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final ConstantDeclaration n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    n.f6.accept(this);
    n.f7.accept(this);
    return nRes;
  }

  public R visit(final UpdatableFieldDeclaration n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final MethodDeclaration n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    n.f6.accept(this);
    return nRes;
  }

  public R visit(final FormalParameterList n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final FormalParameter n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final FinalFormalParameter n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final UpdatableFormalParameter n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final FormalParameterRest n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final ReturnType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final VoidType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final Type n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final UpdatableArrayType n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final RankEquation n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final NonArrayType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final BooleanType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final IntegerType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final DoubleType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final StringType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final PlaceType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final DistType n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final RegionType n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final PointType n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final ClassNameType n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final Identifier n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final Statement n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final Assignment n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final AsyncStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final Block n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final BlockStatement n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final FinalVariableDeclaration n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    return nRes;
  }

  public R visit(final UpdatableVariableDeclaration n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final FinishStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final IfStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    return nRes;
  }

  public R visit(final ElseClause n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final LoopStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    n.f6.accept(this);
    n.f7.accept(this);
    return nRes;
  }

  public R visit(final ExplodedSpecification n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final PointName n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final IdentifierList n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final IdentifierRest n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final PostfixStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final PrintlnStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final ReturnStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final ThrowStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    n.f6.accept(this);
    return nRes;
  }

  public R visit(final WhileStatement n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final Expression n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final InclusiveOrExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final EqualsExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final NotEqualsExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final GreaterThanExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final PlusExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final MinusExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final TimesExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final DivideExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final SinExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    return nRes;
  }

  public R visit(final CosExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    return nRes;
  }

  public R visit(final PowExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    n.f6.accept(this);
    n.f7.accept(this);
    return nRes;
  }

  public R visit(final AbsExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    return nRes;
  }

  public R visit(final MapExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final RegionConstant n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final ColonRest n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final ColonExpression n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final ColonPair n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final UnaryMinusExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final CoercionToIntExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final CoercionToDoubleExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final TypeAnnotatedExpression n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final TypeAnnotation n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final PrimaryExpression n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final This n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final FactoryBlock n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final ArrayAccess n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    return nRes;
  }

  public R visit(final DotMethodCall n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    return nRes;
  }

  public R visit(final DotDistribution n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final DotIsFirst n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final DotIdentifier n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    return nRes;
  }

  public R visit(final AllocationExpression n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final NewObject n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

  public R visit(final NewUpdatableArray n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    n.f5.accept(this);
    return nRes;
  }

  public R visit(final Literal n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final IntegerLiteral n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final FloatingPointLiteral n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final StringLiteral n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final HereLiteral n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final DistUnique n) {
    R nRes = null;
    n.f0.accept(this);
    return nRes;
  }

  public R visit(final ExpressionList n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final ArgumentRest n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    return nRes;
  }

  public R visit(final ArrayInitializer n) {
    R nRes = null;
    n.f0.accept(this);
    n.f1.accept(this);
    n.f2.accept(this);
    n.f3.accept(this);
    n.f4.accept(this);
    return nRes;
  }

}
